--Inicio Vistas--

------------------------------------------------------------------------------
------------------------------------------------------------------------------
--Vista genero
------------------------------------------------------------------------------
CREATE VIEW Consulta_Genero AS

SELECT 
att.Name_Cont as Tipo_Prestamo,
dbu.Credit_active  as Estado_Credito,
dbu.amt_credit_sum  as Credito_Dado,
 cl.Cod_Genero AS Genero

FROM 
  Aplication_Train_Test att,
  Cliente cl,  
  Bureau b,
  Detalle_Bureau dbu


WHERE 
  att.id_Cliente=cl.ID and att.SK_ID_CURR = b.id_curr and b.id_detalle_bureau=dbu.ID



------------------------------------------------------------------------------
------------------------------------------------------------------------------
--Vista contrato
------------------------------------------------------------------------------

CREATE VIEW Consulta_Contrato AS

SELECT 
 cl.Name_Education_Type as Educacion,
 cl.Cant_Hijos ,
 cl.Flag_Own_car as Tiene_Carro,
 pa.AMT_Aplication as Saldo_aplicacion,
 pa.Name_goods_category as Bienes ,
 dc.Name_Contract_status as Estado_contrato,
 dc.Name_portafolio as Nombre_Portafolio




FROM 
  Aplication_Train_Test att,
  Cliente cl, 
  Previus_aplication pa,
  Datos_Contrato dc

WHERE 
  att.id_Cliente=cl.ID and att.SK_ID_CURR= pa.Id_curr and dc.ID=pa.id_datos_contrato
 


------------------------------------------------------------------------------
------------------------------------------------------------------------------
--Vista educacion
------------------------------------------------------------------------------
------------------------------------------------------------------------------
CREATE VIEW Consulta_Educacion AS

SELECT 
cl.Name_Education_Type as Educacion,
ic.Income_Total_AMT as Ingreso_total,
ic.AMT_Credit as Credito,
ic.AMT_Annuality as Anualidades,
ic.Name_Income_Type as trabajo


FROM 
  Aplication_Train_Test att,
  Cliente cl, 
   Ingreso_Cliente ic


WHERE att.id_Cliente=cl.ID  and cl.Id_Ingresos=ic.ID 


 

---------------------------------------
---------------------------------------
--Vista Mes
---------------------------------------

	CREATE VIEW Consulta_Mes AS

SELECT 
ip.Weekday_app_process_start as Dia_inicio,
ip.Hour_app_process as Hora_inicio,
dc.Name_Contract_status as Estado,
dc.Name_paymet_type as Tipo_Pago,
dc.Name_portafolio as Nombre_Portafolio,
ic.Income_Total_AMT as Ingreo_Total_Cliente




FROM 
  Aplication_Train_Test att,
   Info_datos_prestamo ip,
   Datos_Contrato dc,
   Previus_aplication pa,
   Cliente cl,
    Ingreso_Cliente ic

WHERE  att.id_info_prestamo=ip.ID and att.SK_ID_CURR=pa.Id_curr and pa.id_datos_contrato=dc.ID and ic.ID=att.id_Cliente and ic.ID=cl.Id_Ingresos and 
ip.Weekday_app_process_start !='1' and ip.Weekday_app_process_start != '2'  and ip.Weekday_app_process_start != '3'




---------------------------------------
---------------------------------------
--Vista Tipo Cliente
---------------------------------------
CREATE VIEW Consulta_Tipo_Cliente AS

SELECT 
pa.Name_Client_Type as Tipo_cliente,
pa.Name_goods_category as Categoria_Bienes,
pa.name_product_type as Tipo_producto,
cl.ID as Id_Cliente,
dpcb.Months_Balance as Balance_mes


FROM 
  Aplication_Train_Test att,
   Previus_aplication pa,
   Cliente cl,
   Pos_cash_balance pcb,
   Detalle_cash_balance dpcb
    

WHERE  att.id_Cliente=cl.ID and att.SK_ID_CURR =pa.Id_curr and pcb.id_prev=pa.Id_previus_aplication and dpcb.ID=pcb.id_detalle_cash_balance


---------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------
--Procedures
---------------------------------------------------------------------------------------------------------

CREATE PROCEDURE InsertarAplicationTrain
@idcurr int,
@tarjet VARCHAR(200),
@namacont VARCHAR(200),
@idcliente INT,
@idcontrato INT,
@idinfoprestamo INT 
AS
	BEGIN
 
    INSERT INTO dbo.Aplication_Train_Test
        (
		SK_ID_CURR,
		Targets,
		Name_Cont,
		id_Cliente,
		id_contrato,
		id_info_prestamo
		)
         VALUES
               (
			   @idcurr ,
			   @tarjet
			   ,@namacont
			   ,@idcliente
			   ,@idcontrato
			  , @idinfoprestamo
			    
			   )
END;

EXEC InsertarAplicationTrain 1,'UTN32','UTN32',1,1,1
 

ALTER TABLE dbo.Previus_aplication ADD CONSTRAINT fk_idcurrprev_idcurrtrain FOREIGN KEY (Id_curr) REFERENCES Aplication_Train_Test (SK_ID_CURR);


---funcion previus
DROP PROCEDURE InsertarPrevius;
CREATE PROCEDURE InsertarPrevius
@idprevius int,
@idcurr int,
@AMT_Aplication VARCHAR(MAX),
@Name_Client_Type VARCHAR(MAX),
@id_datos_contrato INT,
@Name_goods_category varchar(MAX),
@name_product_type varchar(MAX) 
AS
	BEGIN
 
    INSERT INTO dbo.Previus_aplication
        (
		Id_previus_aplication,
		Id_curr,
		AMT_Aplication,
		Name_Client_Type,
		id_datos_contrato,	
		Name_goods_category,
		name_product_type
		)
         VALUES
               (
		@idprevius ,
		@idcurr ,
		@AMT_Aplication ,
		@Name_Client_Type ,
		@id_datos_contrato ,
		@Name_goods_category ,
		@name_product_type  
			    
			   )
END;

EXEC InsertarPrevius 1,100001,'UTN32','UTN32',1,'DD','DDD';
SELECT * FROM dbo.Previus_aplication ;


ALTER TABLE Aplication_Train_Test ADD CONSTRAINT FK_ATRAIN_IFOPRESTAMO  FOREIGN KEY (id_info_prestamo) REFERENCES Info_datos_prestamo(ID)


CREATE PROCEDURE InsertarInfo_prestamo
@Weekday_app_Pro_start VARCHAR(MAX),
@Hour_app_proces VARCHAR(MAX)
AS
	BEGIN
 
    INSERT INTO dbo.Info_datos_prestamo
        (
			Weekday_app_process_start,
			Hour_app_process
		)
         VALUES
               (
				 @Weekday_app_Pro_start
				 ,@Hour_app_proces		    
			   )
END;


EXEC InsertarInfo_prestamo '1','2';

-----------------------contrato

CREATE PROCEDURE Insert_contrato
@Descripcion VARCHAR(MAX)

AS
	BEGIN
 
    INSERT INTO dbo.Contrato
        (
		Descripcion
		)
         VALUES
               (
				 @Descripcion				     
			   )
END;

EXEC Insert_contrato 'Revolving loans';


------------------------ cliente



CREATE PROCEDURE Insert_cliente
@car VARCHAR(MAX),
@genero VARCHAR(MAX),
@hijos VARCHAR(MAX),
@edu VARCHAR(MAX),
@fstatus VARCHAR(MAX),
@housing VARCHAR(MAX),
@Ocupacion VARCHAR(MAX),
@ingreso int

AS
	BEGIN
 
    INSERT INTO dbo.Cliente
        (
		Flag_Own_car,
		Cod_Genero,
		Cant_Hijos,
		Name_Education_Type,
		Name_Family_Status,
		Name_Housing_Type,
		Occupation_Type,
		Id_Ingresos
		)
         VALUES
               (
				 @car
				 ,@genero
				 	,@hijos	
					,@edu	
					,@fstatus	
					, @housing  
					 , @Ocupacion
					, @ingreso
			   )
END;


exec Insert_cliente '','','','','','','',1;


CREATE PROCEDURE Insert_Ingreso_cliente
@income_total VARCHAR(MAX),
@amt_credit VARCHAR(MAX),
@amtanualiti VARCHAR(MAX),
@amtgoodprice VARCHAR(MAX),
@nameincome VARCHAR(MAX)


AS
	BEGIN
 
    INSERT INTO dbo.Ingreso_Cliente
        (
		Income_Total_AMT
		,AMT_Credit
		,AMT_Annuality
		,AMT_Goods_Price
		,Name_Income_Type
		)
         VALUES
               (
				@income_total
				,@amt_credit
				,@amtanualiti
				,@amtgoodprice
				,@nameincome
			   )
END;


exec Insert_Ingreso_cliente '','','','','';




ALTER TABLE Cliente ADD CONSTRAINT FK_Cliente_IngreCliente  FOREIGN KEY (Id_Ingresos) REFERENCES Ingreso_Cliente(ID)



create procedure Insert_Datos_contrato
@name_contract varchar(max),
@name_paymen varchar(max),
@code_rejec_reason varchar(max),
@name_portafolio varchar(max)
as
	begin
	insert into Datos_Contrato(Name_Contract_status,Name_paymet_type,Code_reject_reason,Name_portafolio)
	values(@name_contract,@name_paymen,@code_rejec_reason,@name_portafolio);
	end;

	exec Insert_Datos_contrato 'Name_Contract_status','Name_paymet_type','Code_reject_reason','Name_portafolio';





create procedure Insert_Datos_contrato
@name_contract varchar(max),
@name_paymen varchar(max),
@code_rejec_reason varchar(max),
@name_portafolio varchar(max)
as
	begin
	insert into Datos_Contrato(Name_Contract_status,Name_paymet_type,Code_reject_reason,Name_portafolio)
	values(@name_contract,@name_paymen,@code_rejec_reason,@name_portafolio);
	end;

	exec Insert_Datos_contrato 'Name_Contract_status','Name_paymet_type','Code_reject_reason','Name_portafolio';

	
ALTER TABLE Previus_aplication ADD CONSTRAINT FK_iddcon_idcontra FOREIGN KEY (id_datos_contrato) REFERENCES Datos_Contrato(id)




ALTER TABLE Previus_aplication ADD CONSTRAINT FK_Idtrain_idcurr FOREIGN KEY (Id_curr) REFERENCES Aplication_Train_Test(SK_ID_CURR)
ALTER TABLE Aplication_Train_Test ADD CONSTRAINT FK_cliente_idcliente FOREIGN KEY (id_Cliente) REFERENCES Cliente(ID)

----------INSTALMMENT PAYMET

create procedure Insert_Intalmet_paymet
@id_prev int ,
@id_curr int ,
@id_dat_pya int ,
@amt_instalmet varchar(100),
@amt_payment varchar(100)
as
	begin
	insert into Installments_payments(id_prev,id_curr,id_datos_paymet,AMT_instalment,AMT_payment)
	values(@id_prev,@id_curr,@id_dat_pya,@amt_instalmet,@amt_payment);
	end;

	exec Insert_Intalmet_paymet 1,2,3,'','';

	-------datos paymet
	create procedure Insert_datos_paymet
@instalmet_VERSION varchar(100),
@INSTALMET_NUMBER varchar(100)
as
	begin
	insert into Datos_Payment(Num_instalmet_version,Num_instalmet_number)
	values(@instalmet_VERSION,@INSTALMET_NUMBER);
	end;
	EXEC Insert_datos_paymet '','';

	SELECT * FROM Installments_payments ORDER BY id_datos_paymet;
	SELECT * FROM Datos_Payment;
	ALTER TABLE Installments_payments ADD CONSTRAINT FK_datosP_Datospayment FOREIGN KEY (id_datos_paymet) REFERENCES Datos_Payment(ID)
	ALTER TABLE Installments_payments ADD CONSTRAINT FK_IP_PE FOREIGN KEY (id_prev) REFERENCES Previus_aplication(Id_previus_aplication)
	ALTER TABLE Installments_payments ADD CONSTRAINT FK_IP_AT FOREIGN KEY (id_curr) REFERENCES Aplication_Train_Test(SK_ID_CURR)

	----------credit car
	create procedure Insert_creditcar_balance
	@id_pre int,
	@id_curr int,
	@id_drawing int ,
	@id_detalle_monto int,
	@name_contrac varchar(max)
	as
		begin
		insert into Credit_card_balance(id_prev,id_curr,id_drawings,id_detalle_monto_tarjeta,Name_contract_status)
		values(@id_pre,@id_curr,@id_drawing,@id_detalle_monto,@name_contrac);
		end;
		exec Insert_creditcar_balance 0,0,0,0,'';

--------------drawings
create procedure Insert_drawing
@amt_dra_amt_curent varchar(max),
@amt_dra_curent varchar(max),
@amt_dra varchar(max),
@amt_dra_other varchar(max),
@amt_dra_pos_curent varchar(max)
as
	begin 
	insert into Drawings(AMT_drawings_amt_current,AMT_drawing_current,AMT_drawing,AMT_drawing_other_currents,AMT_drawing_pos_current)
	values(@amt_dra_amt_curent,@amt_dra_curent,@amt_dra,@amt_dra_other,@amt_dra_pos_curent)
	end;

exec Insert_drawing 'AMT_drawings_amt_current','AMT_drawing_current','AMT_drawing','AMT_drawing_other_currents','AMT_drawing_pos_current';

--------- detalle monto tarjeta
create procedure Insert_Detalle_monto_tarjeta
@amt_inst_min_regu varchar(max),
@amt_paymet_current varchar(max),
@amt_pay_total_cu varchar(max),
@amt_recivable_principal varchar(max),
@amt_recivable varchar(max),
@amt_total_recivible varchar(max),
@monts_balance varchar(max),
@amt_balance varchar(max),
@amt_limit_actual varchar(max)
as
	begin 
	insert into Detalle_Monto_tarjeta(AMT_inst_min_regularity,AMT_paymet_current,AMT_paymet_total_current,
	AMT_recivable_principal,AMT_recivable,ammont_total_recible, Monts_balance,AMT_balance,AMT_limit_actual)
	values(@amt_inst_min_regu,@amt_paymet_current,@amt_pay_total_cu,@amt_recivable_principal,@amt_recivable,
	@amt_total_recivible,@monts_balance,@amt_balance,@amt_limit_actual)
	end;

	select * from Detalle_Monto_tarjeta
	exec Insert_Detalle_monto_tarjeta '','','','','','','','','';

	select * from Credit_card_balance;
	select * from Drawings;
	select * from Detalle_Monto_tarjeta;

	
	ALTER TABLE Credit_card_balance ADD CONSTRAINT FK_CCB_PE FOREIGN KEY (id_prev) REFERENCES Previus_aplication(Id_previus_aplication)
	ALTER TABLE Credit_card_balance ADD CONSTRAINT FK_ccb_AT FOREIGN KEY (id_curr) REFERENCES Aplication_Train_Test(SK_ID_CURR)
	ALTER TABLE Credit_card_balance ADD CONSTRAINT FK_id_drawings FOREIGN KEY (id_drawings) REFERENCES Drawings(ID)
	ALTER TABLE Credit_card_balance ADD CONSTRAINT FK_id_detalle_monto FOREIGN KEY (id_drawings) REFERENCES Detalle_Monto_tarjeta(ID)

	-----------pos cash balance
	create procedure Insert_pos_cash_balance
	@id_prev int,
	@id_curr int,
	@id_detalle_cash int,
	@name_con1sk varchar(max)
	as
		begin
		insert into Pos_cash_balance(id_prev,id_curr,id_detalle_cash_balance,Name_con1sk_dep)
		values(@id_prev,@id_curr,@id_detalle_cash,@name_con1sk);
		end;
		exec Insert_pos_cash_balance '','','','';

	-------------detalle cash balance
	create procedure Insert_detalle_cash_balance
	@months_balance varchar(max),
	@cnt_instalment varchar(max),
	@cnt_instalment_f varchar(max),
	@sk_dpd varchar(300)
	as
		begin
		insert into Detalle_cash_balance(Months_Balance,CNT_instalment,CNT_instalmets_future,SK_DPD_DEF)
		values(@months_balance,@cnt_instalment,@cnt_instalment_f,@sk_dpd);
		end;

		exec Insert_detalle_cash_balance '','','','';
		SELECT * FROM Detalle_cash_balance;
		SELECT * FROM Pos_cash_balance;
ALTER TABLE Pos_cash_balance ADD CONSTRAINT FK_pcb_PE FOREIGN KEY (id_prev) REFERENCES Previus_aplication(Id_previus_aplication)
	ALTER TABLE Pos_cash_balance ADD CONSTRAINT FK_Poschas_AT FOREIGN KEY (id_curr) REFERENCES Aplication_Train_Test(SK_ID_CURR)
	ALTER TABLE Pos_cash_balance ADD CONSTRAINT FK_Poschas_detalle FOREIGN KEY (id_detalle_cash_balance) REFERENCES Detalle_cash_balance(ID)

	----------Bureau
	drop procedure Insert_bureau;
		create procedure Insert_bureau

		@id int,
		@id_curr int,
		@id_detalle_bu int
		as
			begin
			insert into Bureau(ID,id_curr,id_detalle_bureau)
			values(@id,@id_curr,@id_detalle_bu);
			end;

			exec Insert_bureau '','';

			select * from Bureau;

----------datelle bureau
create procedure Insert_Detalle_Bureau
			@Credit_active varchar(max)--
           ,@credit_currence varchar(max)--
           ,@Months_Balance varchar(max)--
           ,@days_credit varchar(max)--
           ,@credit_days_overdue varchar(max)--
           ,@days_credit_endate varchar(max)--
           ,@days_enddate_fact varchar(max)--
           ,@Amt_credit_max_overdue varchar(max)--
           ,@cnt_credit_prolong varchar(max)--
           ,@amt_credit_sum varchar(max)--
           ,@amt_credit_sum_debt varchar(max)--
           ,@amt_credit_sum_limit varchar(max)--
           ,@amt_credit_sum_overdue varchar(max)--
           ,@credit_type varchar(max)--
           ,@days_credit_update varchar(max)--
		   as
					begin
					INSERT INTO Detalle_Bureau
           (Credit_active
           ,credit_currence
           ,Months_Balance
           ,days_credit
           ,credit_days_overdue
           ,days_credit_endate
           ,days_enddate_fact
           ,Amt_credit_max_overdue
           ,cnt_credit_prolong
           ,amt_credit_sum
           ,amt_credit_sum_debt
           ,amt_credit_sum_limit
           ,amt_credit_sum_overdue
           ,credit_type
           ,days_credit_update)
     VALUES(@Credit_active,@credit_currence,@Months_Balance,@days_credit,@credit_days_overdue,
	 @days_credit_endate,@days_enddate_fact,@Amt_credit_max_overdue,@cnt_credit_prolong,@amt_credit_sum,
	 @amt_credit_sum_debt,@amt_credit_sum_limit,@amt_credit_sum_overdue,@credit_type,@days_credit_update);
	 end;

	 exec Insert_Detalle_Bureau 'Credit_active','credit_currence','Months_Balance','days_credit','credit_days_overdue','days_credit_endate','days_enddate_fact','Amt_credit_max_overdue','cnt_credit_prolong','amt_credit_sum','amt_credit_sum_debt','amt_credit_sum_limit','amt_credit_sum_overdue','credit_type','days_credit_update';

			select * from Bureau;
			select * from Detalle_Bureau;

			ALTER TABLE Bureau ADD CONSTRAINT FK_bureau_AT FOREIGN KEY (id_curr) REFERENCES Aplication_Train_Test(SK_ID_CURR)
			ALTER TABLE Bureau ADD CONSTRAINT FK_bureau_Detalle FOREIGN KEY (id_detalle_bureau) REFERENCES Detalle_Bureau(ID)

			select * from Bureau

			--------------bureau balance
			create procedure Insert_Bureau_Balance
			@id_bureau varchar(max),
			@Months_balance varchar(max),
			@status varchar(max)
			as
				begin
				insert into Bureau_Balance(id_Bureau,Months_Balance,status)
				values(@id_bureau,@Months_balance,@status);
				end;



				exec Insert_Bureau_Balance '','','';
				SELECT * FROM Bureau_Balance;

			ALTER TABLE Bureau_Balance ADD CONSTRAINT FK_Balancebureau_Bureau FOREIGN KEY (id_Bureau) REFERENCES Bureau(ID)


CREATE PROCEDURE Insert_Ingreso_cliente
@income_total VARCHAR(MAX),
@amt_credit VARCHAR(MAX),
@amtanualiti VARCHAR(MAX),
@amtgoodprice VARCHAR(MAX),
@nameincome VARCHAR(MAX)


AS
	BEGIN
 
    INSERT INTO dbo.Ingreso_Cliente
        (
		Income_Total_AMT
		,AMT_Credit
		,AMT_Annuality
		,AMT_Goods_Price
		,Name_Income_Type
		)
         VALUES
               (
				@income_total
				,@amt_credit
				,@amtanualiti
				,@amtgoodprice
				,@nameincome
			   )
END;


exec Insert_Ingreso_cliente '','','','','';



ALTER TABLE Cliente ADD CONSTRAINT FK_Cliente_IngreCliente  FOREIGN KEY (Id_Ingresos) REFERENCES Ingreso_Cliente(ID)

---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
--Creacion de tablas
---------------------------------------------------------------------------------------------------------------------



CREATE TABLE Aplication_Train_Test
(
SK_ID_CURR INT PRIMARY KEY,
Targets varchar(255) ,
Name_Cont varchar(255) ,
id_Cliente int,
id_contrato int ,
id_info_prestamo int

)




CREATE TABLE Contrato
(
ID int IDENTITY(1,1) PRIMARY KEY,
Descripcion varchar(MAX) NOT NULL
)

CREATE TABLE Info_datos_prestamo
(
ID int IDENTITY(1,1) PRIMARY KEY,
Weekday_app_process_start varchar(255) ,
Hour_app_process varchar(255),
)


CREATE TABLE Ingreso_Cliente
(
ID int IDENTITY(1,1) PRIMARY KEY,
Income_Total_AMT varchar(255) ,
AMT_Credit varchar(255),
AMT_Annuality varchar(255),
AMT_Goods_Price varchar(255),
Name_Income_Type varchar(255)
)

CREATE TABLE Cliente
(
ID int IDENTITY(1,1) PRIMARY KEY,
Flag_Own_car varchar(255) ,
Cod_Genero varchar(255),
Cant_Hijos varchar(255),
Name_Education_Type varchar(255),
Name_Family_Status varchar(255),
Name_Housing_Type varchar(255),
Occupation_Type varchar(255),
Id_Ingresos int,
)
-------------------------previus

CREATE TABLE Previus_aplication
(
Id_previus_aplication INT PRIMARY KEY,
Id_curr int not null,
AMT_Aplication varchar(255) ,
Name_Client_Type varchar(255) ,
id_datos_contrato int,
id_contrato int ,
Name_goods_category varchar(255) ,
name_product_type varchar(255) ,
)
CREATE TABLE Datos_Contrato
(
ID int IDENTITY(1,1) PRIMARY KEY,
Name_Contract_status varchar(255) ,
Name_paymet_type varchar(255) ,
Code_reject_reason varchar(255) ,
Name_portafolio varchar(255) 
)
-----------------------------------Installments payments
CREATE TABLE Installments_payments
(
ID int IDENTITY(1,1) PRIMARY KEY,
id_prev int not null,
id_curr int not null,
id_datos_paymet int not null,
AMT_instalment varchar(255) ,
AMT_payment varchar(255) ,
)
CREATE TABLE Datos_Payment
(
ID int IDENTITY(1,1) PRIMARY KEY,
Num_instalmet_version varchar(255) ,
Num_instalmet_number varchar(255) ,
)
------------------------------Credit card balance
CREATE TABLE Credit_card_balance
(
ID int IDENTITY(1,1) PRIMARY KEY,
id_prev int not null,
id_curr int not null,
id_drawings int ,
id_detalle_monto_tarjeta int,
Name_contract_status varchar(255) ,
)
CREATE TABLE Drawings
(
ID int IDENTITY(1,1) PRIMARY KEY,
AMT_drawings_amt_current varchar(255) ,
AMT_drawing_current varchar(255) ,
AMT_drawing varchar(255) ,
AMT_drawing_other_currents varchar(255) ,
AMT_drawing_pos_current varchar(255) ,
)
CREATE TABLE Detalle_Monto_tarjeta
(
ID int IDENTITY(1,1) PRIMARY KEY,
AMT_inst_min_regularity varchar(255) ,
AMT_paymet_current varchar(255) ,
AMT_paymet_total_current varchar(255) ,
AMT_recivable_principal varchar(255) ,
AMT_recivable varchar(255) ,
ammont_total_recible varchar(255) ,
Monts_balance varchar(255) ,
AMT_balance varchar(255) ,
AMT_limit_actual varchar(255) 
)
-----------------------------Pos cash balance
CREATE TABLE Pos_cash_balance
(
ID int IDENTITY(1,1) PRIMARY KEY,
id_prev int not null,
id_curr int not null,
id_detalle_cash_balance int ,
Name_con1sk_dep varchar(255) 
)
CREATE TABLE Detalle_cash_balance
(
ID int IDENTITY(1,1) PRIMARY KEY,
Months_Balance varchar(255) ,
CNT_instalment varchar(255) ,
CNT_instalmets_future varchar(255) ,
SK_DPD_DEF varchar(255) 
)
----------------------------------------Bureau
CREATE TABLE Bureau
(
ID int IDENTITY(1,1) PRIMARY KEY,
id_curr int not null,
id_detalle_bureau int 
)
CREATE TABLE Detalle_Bureau
(
ID int IDENTITY(1,1) PRIMARY KEY,
Credit_active varchar(255) ,
credit_currence varchar(255) ,
Months_Balance varchar(255) ,
days_credit varchar(255) ,
credit_days_overdue varchar(255) ,
days_credit_endate varchar(255) ,
days_enddate_fact varchar(255) ,
Amt_credit_max_overdue varchar(255) ,
cnt_credit_prolong varchar(255) ,
amt_credit_sum varchar(255) ,
amt_credit_sum_debt varchar(255) ,
amt_credit_sum_limit varchar(255) ,
amt_credit_sum_overdue varchar(255) ,
credit_type varchar(255) ,
days_credit_update varchar(255) 
)


-----------------------------Bureau Balance
CREATE TABLE Bureau_Balance
(
ID int IDENTITY(1,1) PRIMARY KEY,
id_Bureau int not null,
Months_Balance varchar(255),
status varchar(255),

)







---------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------
--Triggers
---------------------------------------------------------------------------------------------------------------------
----------Tabla Cliente------------------

CREATE TRIGGER Verificar_Cliente
ON Cliente FOR INSERT AS
IF ((SELECT Flag_Own_car From inserted)  = 'N' or (SELECT Flag_Own_car From inserted)  = 'Y' )
	IF ((SELECT Cod_Genero From inserted) = 'M' or (SELECT Cod_Genero From inserted) = 'F')
		IF ((SELECT Name_Education_Type From inserted) = 'Secondary / secondary special' 
		or (SELECT Name_Education_Type From inserted) = 'Higher education'  
		or (SELECT Name_Education_Type From inserted) = 'Incomplete higher'
		or (SELECT Name_Education_Type From inserted) = 'Lower secondary')
			IF ((SELECT Name_Family_Status From inserted) = 'Single / not married' 
			or (SELECT Name_Family_Status From inserted) = 'Married' 
			or (SELECT Name_Family_Status From inserted) = 'Civil marriage' 
			or (SELECT Name_Family_Status From inserted) = 'Widow'
			or (SELECT Name_Family_Status From inserted) = 'Separated')
				IF ((SELECT Name_Housing_Type From inserted) = 'Municipal apartment' 
				or (SELECT Name_Housing_Type From inserted) = 'House / apartment' 
				or (SELECT Name_Housing_Type From inserted) = 'With parents' 
				or (SELECT Name_Housing_Type From inserted) = 'Rented apartment'
				or (SELECT Name_Housing_Type From inserted) = 'Co-op apartment'
				or (SELECT Name_Housing_Type From inserted) = 'Office apartment')
						BEGIN
							print('INSERT LISTO')
						END;
				ELSE
					BEGIN
					RAISERROR('El tipo de alojamiento solo puede ser: Municipal apartment, House / apartment, With parents, Rented apartment, Co-op apartment o Office apartment  ".',16,1)
					ROLLBACK TRANSACTION 
					END;
			ELSE
				BEGIN
				RAISERROR('El status familiar solo puede ser: Single / not married, Married, Civil marriage, Widow o Separated".',16,1)
				ROLLBACK TRANSACTION 
				END;
		ELSE
			BEGIN
			RAISERROR('El tipo de educacion solo puede ser: Secondary / secondary special, Higher education, Incomplete higher o Lower secondary ".',16,1)
			ROLLBACK TRANSACTION 
			END;
	ELSE
		BEGIN
		RAISERROR('Las horas semanales deben ser mayores a 0".',16,1)
		ROLLBACK TRANSACTION 
		END;
ELSE
	BEGIN
	RAISERROR('La Carrera solo puede ser Info, Com Social o Técnica".',16,1)
		ROLLBACK TRANSACTION				
	END;
Go

----------Tabla Ingreso_Cliente------------------

CREATE TRIGGER Verificar_ingreso_cliente
ON Ingreso_Cliente FOR INSERT AS
IF ((SELECT Income_Total_AMT From inserted) > 0 and (SELECT AMT_Credit From inserted) > 0 and (SELECT AMT_Annuality From inserted) > 0 and (SELECT AMT_Goods_Price From inserted) > 0)
	IF((SELECT Name_Income_Type From inserted) = 'Working' 
	or (SELECT Name_Income_Type From inserted) = 'State servant' 
	or (SELECT Name_Income_Type From inserted) = 'Commercial associate' 
	or (SELECT Name_Income_Type From inserted) = 'Pensioner'
	or (SELECT Name_Income_Type From inserted) = ' partner')
		BEGIN
			print('INSERT LISTO')
		END;
	ELSE
		BEGIN
		RAISERROR('El tipo de ingresos es invalido.".',16,1)
			ROLLBACK TRANSACTION				
		END;
ELSE
	BEGIN
	RAISERROR('Ningun valor puede ser menor o igual a cero.".',16,1)
		ROLLBACK TRANSACTION				
	END;
Go

--------------- Tabla Previus_aplication--------------------

CREATE TRIGGER Verificar_prev_aplication
ON Previus_aplication FOR INSERT AS
IF ((SELECT Name_Client_Type From inserted) ='Cash through the bank' or (SELECT Name_Client_Type From inserted) ='XNA' or (SELECT Name_Client_Type From inserted) ='Non-cash from your account')
	IF((SELECT Name_goods_category From inserted) = 'XAP' 
	or (SELECT Name_goods_category From inserted) = 'HC' 
	or (SELECT Name_goods_category From inserted) = 'LIMIT' 
	or (SELECT Name_goods_category From inserted) = 'SCOFR'
	or (SELECT Name_goods_category From inserted) = ' CLIENT')
		IF((SELECT name_product_type From inserted) = 'Repeater' 
		or (SELECT name_product_type From inserted) = 'New' 
		or (SELECT name_product_type From inserted) = 'Refreshed')
			BEGIN
				print('INSERT LISTO')
			END;
		ELSE
			BEGIN
			RAISERROR('El tipo de producto es invalido.".',16,1)
				ROLLBACK TRANSACTION				
			END;
	ELSE
		BEGIN
		RAISERROR('El tipo bienes es invalido.".',16,1)
			ROLLBACK TRANSACTION				
		END;
ELSE
	BEGIN
	RAISERROR('El tipo de Cliente es invalido.".',16,1)
		ROLLBACK TRANSACTION				
	END;

------------ Pos_cash_balance ------------------

CREATE TRIGGER Verificar_pos_cash_balance
ON Pos_cash_balance FOR INSERT AS
IF ((SELECT [Name_con1sk_dep] From inserted) ='Active' 
or (SELECT [Name_con1sk_dep] From inserted) ='Demand' 
or (SELECT [Name_con1sk_dep] From inserted) ='Completed'
or (SELECT [Name_con1sk_dep] From inserted) ='Signed')
	BEGIN
		print('Insert Listo')
			
	END;
ELSE
	BEGIN
	RAISERROR('El estado es invalido.".',16,1)
		ROLLBACK TRANSACTION				
	END;

-------------- Installments_payments -----------

CREATE TRIGGER Verif_install_payments
ON Installments_payments FOR INSERT AS
IF ((SELECT AMT_instalment From inserted) > 0 
or (SELECT AMT_payment From inserted) > 0)
	BEGIN
		print('Insert Listo')	
	END;
ELSE
	BEGIN
	RAISERROR('El estado es invalido.".',16,1)
		ROLLBACK TRANSACTION				
	END;
Go

------------- Info_datos_prestamo -----------------

CREATE TRIGGER Verif_info_prestamo
ON Info_datos_prestamo FOR INSERT AS
IF ((SELECT [Weekday_app_process_start] From inserted) ='MONDAY' 
or (SELECT [Weekday_app_process_start] From inserted) ='TUESDAY'
or (SELECT [Weekday_app_process_start] From inserted) ='WEDNESDAY'
or (SELECT [Weekday_app_process_start] From inserted) ='THURSDAY'
or (SELECT [Weekday_app_process_start] From inserted) ='FRIDAY'
or (SELECT [Weekday_app_process_start] From inserted) ='SATURDAY'
or (SELECT [Weekday_app_process_start] From inserted) ='SUNDAY')
	IF ((SELECT [Hour_app_process] From inserted) > 0)
		BEGIN
			print('Insert Listo')
		END;
	ELSE
		BEGIN
		RAISERROR('Las horas deben ser mayor a 0.".',16,1)
			ROLLBACK TRANSACTION				
		END;
ELSE
	BEGIN
	RAISERROR('El Dia es invalido.".',16,1)
		ROLLBACK TRANSACTION				
	END;
Go

--------------- Tabla Detalle_Cash_balance ---------------------

CREATE TRIGGER Verificar_cash_balance
ON Detalle_cash_balance FOR INSERT AS
IF ((SELECT [Months_Balance] From inserted) <0 and  (SELECT [Months_Balance] From inserted) >-100)
	IF((SELECT [CNT_instalment] From inserted) > 0 and (SELECT [CNT_instalment] From inserted) < 100)
		IF ((SELECT CNT_instalmets_future From inserted) > 0 and (SELECT CNT_instalmets_future From inserted) < 100)
			IF ((SELECT SK_DPD_DEF From inserted) >= 0 and (SELECT SK_DPD_DEF From inserted) < 50)
				BEGIN
					print('Insert Listo')
			
				END;
			ELSE
				BEGIN
				RAISERROR('Fuera del rango 0 a 50.".',16,1)
					ROLLBACK TRANSACTION				
				END;
		ELSE
			BEGIN
			RAISERROR('Fuera del rango 0 a 100.".',16,1)
			ROLLBACK TRANSACTION				
			END;
	ELSE
		BEGIN
		RAISERROR('Fuera del rango 0 a 100.".',16,1)
		ROLLBACK TRANSACTION				
		END;
ELSE
	BEGIN
	RAISERROR('Fuera del rango 0 a -100.".',16,1)
		ROLLBACK TRANSACTION				
	END;
go 

----------------- Detalle_bureau -------------------

CREATE TRIGGER Verificar_detalle_bureau
ON Detalle_Bureau FOR INSERT AS
IF ((SELECT [Credit_active] From inserted) = 'Closed' or (SELECT [Credit_active] From inserted) ='Active')
	IF((SELECT credit_currence From inserted) = 'currency 1')
		IF ((SELECT [days_credit] From inserted) < 0 )
			IF ((SELECT [credit_days_overdue] From inserted) >= 0)
				IF ((SELECT [Amt_credit_max_overdue] From inserted) >= 0 
				and (SELECT [amt_credit_sum] From inserted) >= 0 
				and (SELECT [amt_credit_sum_debt] From inserted) >= 0 
				and (SELECT amt_credit_sum_limit From inserted) >= 0)
					IF ((SELECT [credit_type] From inserted) = 'Consumer credit' 
					and (SELECT [credit_type] From inserted) = 'Credit card' 
					and (SELECT [credit_type] From inserted) = 'Car loan' 
					and (SELECT [credit_type] From inserted) = 'Mortgage'
					and (SELECT [credit_type] From inserted) = 'Another type of loan'
					and (SELECT [credit_type] From inserted) = 'Microloan')
						IF ((SELECT [days_credit_update] From inserted) < 0 )
							BEGIN
								print('Insert Listo')
			
							END;
						ELSE
							BEGIN
							RAISERROR('Tiene que ser menor a 0".',16,1)
								ROLLBACK TRANSACTION				
							END;
					ELSE
						BEGIN
						RAISERROR('El tipo solo puede ser: Consumer credit, Credit card, Car loan, Mortgage, Another type of loan o Microloan".',16,1)
							ROLLBACK TRANSACTION				
						END;
				ELSE
					BEGIN
					RAISERROR('Tiene que ser mayor o igual a 0".',16,1)
						ROLLBACK TRANSACTION				
					END;
			ELSE
				BEGIN
				RAISERROR('Tiene que ser mayor o igual a 0".',16,1)
					ROLLBACK TRANSACTION				
				END;
		ELSE
			BEGIN
			RAISERROR('Tiene que ser menor a 0.".',16,1)
			ROLLBACK TRANSACTION				
			END;
	ELSE
		BEGIN
		RAISERROR('Solo pude ser currency 1.".',16,1)
		ROLLBACK TRANSACTION				
		END;
ELSE
	BEGIN
	RAISERROR('Solo Puede ser Active or Closed.".',16,1)
		ROLLBACK TRANSACTION				
	END;
go 

------------------- tabla Datos_Payment -----------------

CREATE TRIGGER Verificar_datos_payment
ON Datos_Payment FOR INSERT AS
IF ((SELECT [Num_instalmet_version] From inserted) >= 0 and (SELECT [Num_instalmet_number] From inserted) >=0)
	BEGIN
		print('INSERT LISTO')
	END;
ELSE
	BEGIN
		RAISERROR('Solo Puede ser Active or Closed.".',16,1)
		ROLLBACK TRANSACTION				
	END;
go 

-------------------- Tabla Datos_Contrato ------------------

CREATE TRIGGER Verificar_datos_contrato
ON Datos_Contrato FOR INSERT AS
IF ((SELECT [Name_Contract_status] From inserted) = 'Approved' 
	or (SELECT [Name_Contract_status] From inserted) ='Refused'
	or (SELECT [Name_Contract_status] From inserted) ='Canceled'
	or (SELECT [Name_Contract_status] From inserted) ='Unused offer')
	IF ((SELECT [Name_paymet_type] From inserted) = 'Consumer loans' 
		or (SELECT [Name_paymet_type] From inserted) ='Cash loans'
		or (SELECT [Name_paymet_type] From inserted) ='Revolving loans')
		IF ((SELECT [Code_reject_reason] From inserted) = 'XAP' 
			or (SELECT [Code_reject_reason] From inserted) ='HC'
			or (SELECT [Code_reject_reason] From inserted) ='SCO'
			or (SELECT [Code_reject_reason] From inserted) ='LIMIT'
			or (SELECT [Code_reject_reason] From inserted) ='XNA'
			or (SELECT [Code_reject_reason] From inserted) ='CLIENT'
			or (SELECT [Code_reject_reason] From inserted) ='SCOFR')
			IF ((SELECT [Name_portafolio] From inserted) = 'XNA' 
				or (SELECT [Name_portafolio] From inserted) ='Cash'
				or (SELECT [Name_portafolio] From inserted) ='Cards'
				or (SELECT [Name_portafolio] From inserted) ='POS'
				or (SELECT [Name_portafolio] From inserted) ='Audio/Video'
				or (SELECT [Name_portafolio] From inserted) ='Homewares'
				or (SELECT [Name_portafolio] From inserted) ='Consumer Electronics'
				or (SELECT [Name_portafolio] From inserted) ='Sport and Leisure'
				or (SELECT [Name_portafolio] From inserted) ='Photo / Cinema Equipment'
				or (SELECT [Name_portafolio] From inserted) ='Gardening'
				or (SELECT [Name_portafolio] From inserted) ='Clothing and Accessories'
				or (SELECT [Name_portafolio] From inserted) ='Construction Materials'
				or (SELECT [Name_portafolio] From inserted) ='Furniture'
				or (SELECT [Name_portafolio] From inserted) ='Computers'
				or (SELECT [Name_portafolio] From inserted) ='Mobile')
				BEGIN
					print('INSERT LISTO')
				END;
			ELSE
				BEGIN
					RAISERROR('Tipo incorrecto.".',16,1)
					ROLLBACK TRANSACTION				
				END;
		ELSE
			BEGIN
				RAISERROR('Solo Puede ser: XAP, HC, SCO, LIMIT, XNA, CLIENT o SCOFR.".',16,1)
				ROLLBACK TRANSACTION				
			END;
	ELSE
		BEGIN
			RAISERROR('Solo Puede ser: Consumer loans, Cash loans o Revolving loans.".',16,1)
			ROLLBACK TRANSACTION				
		END;
ELSE
	BEGIN
		RAISERROR('Solo Puede ser: Approved, Refused, Canceled o Unused offer.".',16,1)
		ROLLBACK TRANSACTION				
	END;
go 

---------------- Tabla Credit_card_balance ---------------

CREATE TRIGGER Verificar_credit_card_balance
ON Datos_Contrato FOR INSERT AS
IF ((SELECT Name_contract_status From inserted) = 'Active' 
	or (SELECT Name_contract_status From inserted) ='Sent proposal'
	or (SELECT Name_contract_status From inserted) ='Completed'
	or (SELECT Name_contract_status From inserted) ='Signed')
		BEGIN
			print('INSERT LISTO')
		END;
ELSE
	BEGIN
		RAISERROR('Solo Puede ser: Active, Sent proposal, Completed o Signed.".',16,1)
		ROLLBACK TRANSACTION				
	END;
go 

---------------- Tabla bureau_balance ----------------------

CREATE TRIGGER Verificar_bureau_balance
ON Bureau_Balance FOR INSERT AS
IF ((SELECT [Months_Balance] From inserted) <=0)
	IF ((SELECT [status] From inserted)='X'
	or (SELECT [status] From inserted)='C'
	or (SELECT [status] From inserted)='0')
		BEGIN
			print('INSERT LISTO')
		END;
	ELSE
		BEGIN
			RAISERROR('Solo Puede ser: X, C o 0.".',16,1)
			ROLLBACK TRANSACTION				
		END;
ELSE
	BEGIN
		RAISERROR('Solo Puede ser igual o menor a 0.".',16,1)
		ROLLBACK TRANSACTION				
	END;
go 
-------------- Aplication_train_test -------------------

CREATE TRIGGER Verificar_aplication_train_test
ON [Aplication_Train_Test] FOR INSERT AS
IF ((SELECT [Targets] From inserted) <=0)
	IF ((SELECT [Name_Cont] From inserted)='Cash loans'
	or (SELECT [Name_Cont] From inserted)='Revolving loans')
		BEGIN
			print('INSERT LISTO')
		END;
	ELSE
		BEGIN
			RAISERROR('Solo Puede ser: Cash loans o Revolving loans.".',16,1)
			ROLLBACK TRANSACTION				
		END;
ELSE
	BEGIN
		RAISERROR('Solo Puede ser igual o menor a 0.".',16,1)
		ROLLBACK TRANSACTION				
	END;
go 


--------------------------------------------------------
---------------------Index------------------------------

--1
USE [ProyectoaBD]
GO

/** Object:  Index [NonClusteredIndex-20220330-164838]    Script Date: 3/5/2022 09:41:23 **/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20220330-164838] ON [aplication].[Aplication_Train_Test]
(
	[Name_Cont] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
GO


--2
USE [ProyectoaBD]
GO

/** Object:  Index [NonClusteredIndex-20220330-164913]    Script Date: 3/5/2022 09:42:40 **/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20220330-164913] ON [bureau].[Bureau]
(
	[id_detalle_bureau] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
GO

--3
USE [ProyectoaBD]
GO

/** Object:  Index [NonClusteredIndex-20220330-165026]    Script Date: 3/5/2022 09:43:06 **/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20220330-165026] ON [bureau].[Detalle_Bureau]
(
	[credit_currence] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
GO

--4
USE [ProyectoaBD]
GO

/** Object:  Index [NonClusteredIndex-20220330-164958]    Script Date: 3/5/2022 09:43:35 **/
CREATE NONCLUSTERED INDEX [NonClusteredIndex-20220330-164958] ON [client_data].[Cliente]
(
	[Cod_Genero] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON)
GO

